/* tslint:disable */
/* eslint-disable */
/**
 * hack22spring-api
 * hack22spring-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GourmetAnswer
 */
export interface GourmetAnswer {
    /**
     * 1~7までの質問連番
     * @type {number}
     * @memberof GourmetAnswer
     */
    'id': number;
    /**
     * 回答(yes or no)
     * @type {string}
     * @memberof GourmetAnswer
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface GourmetAnswerRequest
 */
export interface GourmetAnswerRequest {
    /**
     * uuid(一連の検索に紐づく)
     * @type {string}
     * @memberof GourmetAnswerRequest
     */
    'id': string;
    /**
     * 回答
     * @type {Array<GourmetAnswer>}
     * @memberof GourmetAnswerRequest
     */
    'answer': Array<GourmetAnswer>;
}
/**
 * 
 * @export
 * @interface GourmetAnswerResponse
 */
export interface GourmetAnswerResponse {
    /**
     * uuid(一連の検索に紐づく)
     * @type {string}
     * @memberof GourmetAnswerResponse
     */
    'id': string;
    /**
     * 
     * @type {GourmetShop}
     * @memberof GourmetAnswerResponse
     */
    'shop': GourmetShop;
}
/**
 * 
 * @export
 * @interface GourmetQuestion
 */
export interface GourmetQuestion {
    /**
     * 1~7までの質問連番
     * @type {number}
     * @memberof GourmetQuestion
     */
    'id': number;
    /**
     * 画像URL
     * @type {string}
     * @memberof GourmetQuestion
     */
    'image': string;
    /**
     * ジャンル
     * @type {string}
     * @memberof GourmetQuestion
     */
    'genre': string;
    /**
     * サブジャンル
     * @type {string}
     * @memberof GourmetQuestion
     */
    'subgenre': string;
    /**
     * 価格帯
     * @type {string}
     * @memberof GourmetQuestion
     */
    'price': string;
}
/**
 * 
 * @export
 * @interface GourmetShop
 */
export interface GourmetShop {
    /**
     * uuid(HotpepperAPIのお店ID)
     * @type {string}
     * @memberof GourmetShop
     */
    'id': string;
    /**
     * お店名
     * @type {string}
     * @memberof GourmetShop
     */
    'name': string;
    /**
     * 住所
     * @type {string}
     * @memberof GourmetShop
     */
    'address': string;
    /**
     * ロゴ画像URL
     * @type {string}
     * @memberof GourmetShop
     */
    'logoImage': string;
    /**
     * 緯度
     * @type {number}
     * @memberof GourmetShop
     */
    'lat': number;
    /**
     * 経度
     * @type {number}
     * @memberof GourmetShop
     */
    'lng': number;
    /**
     * ジャンル
     * @type {string}
     * @memberof GourmetShop
     */
    'genre': string;
    /**
     * サブジャンル
     * @type {string}
     * @memberof GourmetShop
     */
    'subgenre': string;
    /**
     * 価格帯
     * @type {string}
     * @memberof GourmetShop
     */
    'price': string;
    /**
     * 営業時間
     * @type {string}
     * @memberof GourmetShop
     */
    'open': string;
    /**
     * 閉店時間/休業日
     * @type {string}
     * @memberof GourmetShop
     */
    'close': string;
    /**
     * お店のホットペッパーURL
     * @type {string}
     * @memberof GourmetShop
     */
    'url': string;
    /**
     * 画像URL
     * @type {string}
     * @memberof GourmetShop
     */
    'photo': string;
    /**
     * 昼営業についての説明
     * @type {string}
     * @memberof GourmetShop
     */
    'lunch': string;
}
/**
 * 
 * @export
 * @interface GourmetStartRequest
 */
export interface GourmetStartRequest {
    /**
     * 緯度
     * @type {number}
     * @memberof GourmetStartRequest
     */
    'lat'?: number;
    /**
     * 経度
     * @type {number}
     * @memberof GourmetStartRequest
     */
    'lng'?: number;
    /**
     * 駅名
     * @type {string}
     * @memberof GourmetStartRequest
     */
    'station'?: string;
}
/**
 * 
 * @export
 * @interface GourmetStartResponse
 */
export interface GourmetStartResponse {
    /**
     * uuid(一連の検索に紐づく)
     * @type {string}
     * @memberof GourmetStartResponse
     */
    'id': string;
    /**
     * 質問
     * @type {Array<GourmetQuestion>}
     * @memberof GourmetStartResponse
     */
    'questions': Array<GourmetQuestion>;
}

/**
 * GourmetApi - axios parameter creator
 * @export
 */
export const GourmetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 検索結果取得
         * @summary 検索結果取得
         * @param {GourmetAnswerRequest} [gourmetAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGourmetAnswer: async (gourmetAnswerRequest?: GourmetAnswerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gourmet/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gourmetAnswerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検索スタート
         * @summary 検索スタート
         * @param {GourmetStartRequest} [gourmetStartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGourmetStart: async (gourmetStartRequest?: GourmetStartRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gourmet/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gourmetStartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GourmetApi - functional programming interface
 * @export
 */
export const GourmetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GourmetApiAxiosParamCreator(configuration)
    return {
        /**
         * 検索結果取得
         * @summary 検索結果取得
         * @param {GourmetAnswerRequest} [gourmetAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGourmetAnswer(gourmetAnswerRequest?: GourmetAnswerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GourmetAnswerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGourmetAnswer(gourmetAnswerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 検索スタート
         * @summary 検索スタート
         * @param {GourmetStartRequest} [gourmetStartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGourmetStart(gourmetStartRequest?: GourmetStartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GourmetStartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGourmetStart(gourmetStartRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GourmetApi - factory interface
 * @export
 */
export const GourmetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GourmetApiFp(configuration)
    return {
        /**
         * 検索結果取得
         * @summary 検索結果取得
         * @param {GourmetAnswerRequest} [gourmetAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGourmetAnswer(gourmetAnswerRequest?: GourmetAnswerRequest, options?: any): AxiosPromise<GourmetAnswerResponse> {
            return localVarFp.postGourmetAnswer(gourmetAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 検索スタート
         * @summary 検索スタート
         * @param {GourmetStartRequest} [gourmetStartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGourmetStart(gourmetStartRequest?: GourmetStartRequest, options?: any): AxiosPromise<GourmetStartResponse> {
            return localVarFp.postGourmetStart(gourmetStartRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GourmetApi - object-oriented interface
 * @export
 * @class GourmetApi
 * @extends {BaseAPI}
 */
export class GourmetApi extends BaseAPI {
    /**
     * 検索結果取得
     * @summary 検索結果取得
     * @param {GourmetAnswerRequest} [gourmetAnswerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GourmetApi
     */
    public postGourmetAnswer(gourmetAnswerRequest?: GourmetAnswerRequest, options?: AxiosRequestConfig) {
        return GourmetApiFp(this.configuration).postGourmetAnswer(gourmetAnswerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 検索スタート
     * @summary 検索スタート
     * @param {GourmetStartRequest} [gourmetStartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GourmetApi
     */
    public postGourmetStart(gourmetStartRequest?: GourmetStartRequest, options?: AxiosRequestConfig) {
        return GourmetApiFp(this.configuration).postGourmetStart(gourmetStartRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


